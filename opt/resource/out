#! /usr/bin/env python3

from datetime import datetime
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from html2text import html2text
import json
import os
from smtplib import SMTP
import sys

from inlinestyler.utils import inline_css
from jinja2 import Template

from common import get_payload


def put(src):
    print("Using dir {}".format(src), file=sys.stderr)
    payload = get_payload()
    template_vars = get_template_vars(src, payload)
    mime_subtype = get_mime_subtype(payload)
    subject = get_subject(src, payload, template_vars)
    body = get_message(src, payload, template_vars)

    if mime_subtype == 'html':
        message = MIMEMultipart('alternative')
        message.attach(MIMEText(html2text(body), 'plain'))
        message.attach(MIMEText(body, mime_subtype))
    else:
        message = MIMEText(body, mime_subtype)

    message['Subject'] = subject
    message['From'] = get_sender(payload)
    message['To'] = ', '.join(get_recipients(src, payload))
    add_attachments(message, payload)

    with SMTP(**get_smtp_kwargs(payload)) as smtp:
        smtp.send_message(message)

    print(json.dumps({
        'version': {'version': datetime.isoformat(datetime.now())},
        'metadata': [
            {'name': 'subject', 'value': subject},
        ]
    }))


def get_sender(payload):
    return get_value_from_payload(payload, 'source', 'from')

def get_recipients(src, payload):
    recipients = get_value_from_payload(payload, 'params', 'to', optional=True)
    if not recipients:
        fname = get_value_from_payload(payload, 'params', 'to_file')
        with open(os.path.join(src, fname)) as fp:
            recipients = fp.read().split('\n')

    if not isinstance(recipients, list):
        raise ValueError("The recipients parameter has to be a list!")
    return recipients


def add_attachments(message, payload):
    file_names = get_value_from_payload(payload, 'params', 'attachments', default=[], optional=True)
    for file_name in file_names:
        message.attach(get_attachment(file_name))


def get_attachment(file_name):
    attachment = MIMEBase('application', 'octet-stream')
    with open(file_name) as fp:
        attachment.set_payload(fp.read())
    encoders.encode_base64(attachment)
    attachment.add_header('Content-Disposition', 'attachment', filename=file_name)
    return attachment


def get_mime_subtype(payload):
    return get_value_from_payload(payload, 'params', 'type', default='html', optional=True)


def get_subject(src, payload, template_vars):
    subject = get_value_from_payload(payload, 'params', 'subject_text', optional=True)
    if not subject:
        fname = get_value_from_payload(payload, 'params', 'subject')
        with open(os.path.join(src, fname)) as fp:
            subject = fp.read()
    return Template(subject).render(template_vars)


def get_message(src, payload, template_vars):
    message = get_value_from_payload(payload, 'params', 'body_text', optional=True)
    if not message:
        fname = get_value_from_payload(payload, 'params', 'body')
        with open(os.path.join(src, fname)) as fp:
            message = fp.read()

    inline = get_value_from_payload(payload, 'params', 'inline_css', default=True, optional=True)
    mime_subtype = get_mime_subtype(payload)
    message = Template(message).render(template_vars)

    if mime_subtype == 'html' and inline:
        message = inline_css(message)
    return message

def get_template_vars(src, payload):
    fname = get_value_from_payload(payload, 'params', 'vars', optional=True)
    template_vars = dict(os.environ)
    if fname:
        with open(os.path.join(src, fname)) as fp:
            template_vars.update(json.load(fp))
    return template_vars


def get_value_from_payload(payload, section, key, default=None, optional=False):
    try:
        return payload[section][key]
    except KeyError:
        if not optional:
            raise ValueError("Unable to extract '{}' from '{}'".format(key, section))
    return default


def get_smtp_kwargs(payload):
    host = get_value_from_payload(payload, 'params', 'host')
    port = get_value_from_payload(payload, 'params', 'port', default=0, optional=True)
    return {'host': host, 'port': port}


if __name__ == '__main__':
    try:
        put(sys.argv[1])
    except Exception as e:
        print(str(e), file=sys.stderr, flush=True)
